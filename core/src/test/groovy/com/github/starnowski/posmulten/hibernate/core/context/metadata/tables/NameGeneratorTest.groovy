package com.github.starnowski.posmulten.hibernate.core.context.metadata.tables

import org.hibernate.mapping.Constraint
import org.hibernate.mapping.Table
import spock.lang.Specification
import spock.lang.Unroll

import static java.util.Collections.emptyList

class NameGeneratorTest extends Specification {

    @Unroll
    def "should return name with prefix #prefix generated by static method (#generatedString) and shorten for maximum length : #maxLength, #expectedString" () {
        given:
            def tested = new NameGenerator(maxLength)
            def table = Mock(Table)
            def generatorMock = org.mockito.Mockito.mockStatic(Constraint.class)
            generatorMock.when({  -> Constraint.generateName(prefix, table, emptyList()) }).thenReturn(generatedString)

        when:
            def result = tested.generate(prefix, table)

        then:
            result == expectedString

        where:
        prefix  |   maxLength   |   generatedString ||  expectedString
        "xxx_"  |   25          |   "some_long_string_longer_then_25_characters"    ||  "some_long_string_longer_t"
    }
}
