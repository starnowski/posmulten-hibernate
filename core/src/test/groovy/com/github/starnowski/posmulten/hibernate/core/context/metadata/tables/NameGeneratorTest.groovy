package com.github.starnowski.posmulten.hibernate.core.context.metadata.tables

import org.hibernate.mapping.Column
import org.hibernate.mapping.Constraint
import org.hibernate.mapping.Table
import org.mockito.MockedStatic
import spock.lang.Specification
import spock.lang.Unroll

import java.util.stream.Collectors

import static java.util.Collections.emptyList
import static java.util.stream.Collectors.toList

class NameGeneratorTest extends Specification {

    static MockedStatic<Constraint> generatorMock

    def setupSpec()
    {
        generatorMock = org.mockito.Mockito.mockStatic(Constraint.class)
    }

    @Unroll
    def "should return name with prefix #prefix generated by static method (#generatedString) and shorten for maximum length : #maxLength, #expectedString" () {
        given:
            def tested = new NameGenerator(maxLength)
            def table = Mock(Table)
            generatorMock.when({  -> Constraint.generateName(prefix, table, emptyList()) }).thenReturn(generatedString)

        when:
            def result = tested.generate(prefix, table)

        then:
            result == expectedString

        where:
            prefix              |   maxLength   |   generatedString                                         ||  expectedString
            "xxx_"              |   25          |   "some_long_string_longer_then_25_characters"            ||  "some_long_string_longer_t"
            "rls_policy"        |   15          |   "generated_string_by_static_method"                     ||  "generated_strin"
            "posmulte_pref"     |   70          |   "normal_string_that_does_not_reach_max_length_limit"    ||  "normal_string_that_does_not_reach_max_length_limit"
    }

    @Unroll
    def "should return name with prefix #prefix generated by static method (#generatedString) with passed column list (#columnNames) and shorten for maximum length : #maxLength, #expectedString" () {
        given:
            def tested = new NameGenerator(maxLength)
            def table = Mock(Table)
            def columns = columnNames.stream().map({
                def column = Mock(Column)
                column.getName() >> it
                return column
            }).collect(toList())
            def sortedColumnsList = columns.stream().sorted(new Comparator<Column>() {
                @Override
                int compare(Column o1, Column o2) {
                    return o1.getName() <=> o2.getName()
                }
            }).collect(toList())
            generatorMock.when({  -> Constraint.generateName(prefix, table, sortedColumnsList) }).thenReturn(generatedString)

        when:
            def result = tested.generate(prefix, table, columns)

        then:
            result == expectedString

        where:
            prefix              |   maxLength   |   generatedString                                         |   columnNames             ||  expectedString
            "xxx_"              |   25          |   "some_long_string_longer_then_25_characters"            |   ["z", "a"]              ||  "some_long_string_longer_t"
            "rls_policy"        |   15          |   "generated_string_by_static_method"                     |   ["a", "b", "c"]         ||  "generated_strin"
            "posmulte_pref"     |   70          |   "normal_string_that_does_not_reach_max_length_limit"    |   ["a", "b", "d", "c"]    ||  "normal_string_that_does_not_reach_max_length_limit"
    }
}
